plugins {
    id 'java'
    id 'application'
}

mainClassName = 'org.MyAmusementPark.src.run.MyAmusementParkMain'
group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
}

test {
    useJUnitPlatform()
}

run {
    standardInput = System.in
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
            // Set a strategy for duplicate files
            processResources {
                duplicatesStrategy = DuplicatesStrategy.EXCLUDE
            }
        }
    }
}

task runServer(type: JavaExec) {
    main = 'org.MyAmusementPark.src.run.MyAmusementParkMain'
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
    standardInput = System.in
}

task runClient(type: JavaExec) {
    main = 'org.MyClient.src.application.ClientMain' // Replace with your actual client main class
    classpath = sourceSets.main.runtimeClasspath
    // Add any specific client args if necessary
    // args 'clientArg1', 'clientArg2'
    standardInput = System.in
}
